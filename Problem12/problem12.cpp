//Problem #12: Highly divisible triangular number
//Description: The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28
//We can see that 28 is the first triangle number to have over five divisors.
//Output: What is the value of the first triangle number to have over five hundred divisors?

#include <iostream>

//Function Prototypes
int countDivisors(const int&);

//Main function
int main()
{
    int triNum = 1, addNum = 1;
    const int DIVISOR_TARGET = 500;

    while(countDivisors(triNum) < DIVISOR_TARGET)
    {
        triNum += ++addNum;
    }

    std::cout << triNum;

}

int countDivisors(const int& n)
{
    int count = 0;
    for(int i = 1; i <= n; i++)
    {
        if (n % i == 0)         //if number is divisible
            count++;            //increase count
    }

    return count;
}